=begin pod

=head1 NAME

OpenSSL - OpenSSL bindings

=head1 SYNOPSIS

=begin code :lang<raku>

use OpenSSL;
my $openssl = OpenSSL.new;
$openssl.set-fd(123);
$openssl.write("GET / HTTP/1.1\r\nHost: somehost\r\n\r\n");

=end code

=head1 DESCRIPTION

A module which provides OpenSSL bindings, making us able to set up a
TLS/SSL connection.

=head1 METHODS

=head2 method new

=begin code :lang<raku>

method new(Bool :$client = False, Int :$version?)

=end code

A constructor. Initializes OpenSSL library, sets method and context.
If $version is not specified, the highest possible version is negotiated.

=head2 method set-fd

=begin code :lang<raku>

method set-fd(OpenSSL:, int32 $fd)

=end code

Assigns connection's file descriptor (file handle) $fd to the SSL object.

To get the $fd we should use C to set up the connection. (See
L<NativeCall>) I hope we will be able to use Raku's IO::Socket module
instead of connecting through C soon-ish.

=head2 method set-connect-state

=begin code :lang<raku>

method set-connect-state(OpenSSL:)

=end code

Sets SSL object to connect (client) state.

Use it when you want to connect to SSL servers.

=head2 method set-accept-state

=begin code :lang<raku>

method set-accept-state(OpenSSL:)

=end code

Sets SSL object to accept (server) state.

Use it when you want to provide an SSL server.

=head2 method connect

=begin code :lang<raku>

method connect(OpenSSL:)

=end code

Connects to the server using $fd (passed using .set-fd).

Does all the SSL stuff like handshaking.

=head2 method accept

=begin code :lang<raku>

method accept(OpenSSL:)

=end code

Accepts new client connection.

Does all the SSL stuff like handshaking.

=head2 method write

=begin code :lang<raku>

method write(OpenSSL:, Str $s)

=end code

Sends $s to the other side (server/client).

=head2 method read

=begin code :lang<raku>

method read(OpenSSL:, Int $n, Bool :$bin)

=end code

Reads $n bytes from the other side (server/client).

Bool :$bin if we want it to return Buf instead of Str.

=head2 method use-certificate-file

=begin code :lang<raku>

method use-certificate-file(OpenSSL:, Str $file)

=end code

Assings a certificate (from file) to the SSL object.

=head2 method use-privatekey-file

=begin code :lang<raku>

method use-privatekey-file(OpenSSL:, Str $file)

=end code

Assings a private key (from file) to the SSL object.

=head2 method check-private-key

=begin code :lang<raku>

method check-private-key(OpenSSL:)

=end code

Checks if private key is valid.

=head2 method shutdown

=begin code :lang<raku>

method shutdown(OpenSSL:)

=end code

Turns off the connection.

=head2 method ctx-free

=begin code :lang<raku>

method ctx-free(OpenSSL:)

=end code

Frees C's SSL_CTX struct.

=head2 method ssl-free

=begin code :lang<raku>

method ssl-free(OpenSSL:)

=end code

Frees C's SSL struct.

=head2 method close

=begin code :lang<raku>

method close(OpenSSL:)

=end code

Closes the connection.

Unlike .shutdown it calls ssl-free, ctx-free, and then it shutdowns.

=head1 TOOLS

Public key signing tools.

=head2 OpenSSL::RSATools

=begin code :lang<raku>

use OpenSSL::RSATools;

my $pem = slurp 'key.pem';
my $rsa = OpenSSL::RSAKey.new(private-pem => $pem);
my $data = 'as df jk l';
my $signature = $rsa.sign($data.encode);
my $rsa = OpenSSL::RSAKey.new(public-pem => $public);
if $rsa.verify($data.encode, $signature) { ... }

=end code

=head2 OpenSSL::CryptTools

Symmetric encryption tools (currently only AES256/192/128 encrypt/decrypt)

=begin code :lang<raku>

use OpenSSL::CryptTools;

my $ciphertext = encrypt("asdf".encode,
                         :aes256,
                         :iv(("0" x 16).encode),
                         :key(('x' x 32).encode));
my $plaintext = decrypt($ciphertext,
                        :aes256,
                        :iv(("0" x 16).encode),
                        :key(('x' x 32).encode));

=end code

=head2 OpenSSL::Digest

Digest Functions (currently only md5/sha1/sha256/sha384/sha512)

=begin code :lang<raku>

use OpenSSL::Digest;
my Blob $digest = md5("xyz".encode);

=end code

=head2  OpenSSL::Digest::MD5

OO-Interface supporting incremental digesting

=begin code :lang<raku>

use OpenSSL::Digest::MD5;

my $md5 = OpenSSL::Digest::MD5.new; # Create fresh object
$md5.add('abc');                    # pass in Str or Blob
$md5.add('def');                    # Add some more data
my $digest = $md5.hash;             # Blob hash (and reset)
$md5.addfile('myfile');             # Read a file
my $hexdigest = $md5.hex;           # hex hash  (and reset)

=end code

=head1 CAVEATS

=head2 MacOS

Many native libraries on MacOS are installed with the C<brew> command
line interface.  For this module one would typically have to do a
C<brew install openssl>.

The use of native libraries is slightly more complicated on the MacOS
operating system than on other operating systems.  This generally means
that a symlink needs to be installed in a trusted filesystem location.
If the L<C<MacOS::NativeLib>|https://raku.land/zef:lizmat/MacOS::NativeLib>
distribution is installed, then these symlinks will be automatically
created when this module is built.

=head1 SEE ALSO

L<IO::Socket::SSL>

=head1 AUTHOR

=item Filip Sergot

Source can be located at: https://github.com/raku-community-modules/OpenSSL .
Comments and Pull Requests are welcome.

=head1 COPYRIGHT AND LICENSE

Copyright 2014 - 2022 Filip Sergot

Copyright 2023 - 2025 The Raku Community

This library is free software; you can redistribute it and/or modify it under the MIT License.

=end pod

# vim: expandtab shiftwidth=4
